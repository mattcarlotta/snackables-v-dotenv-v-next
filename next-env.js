const fs=require("fs"),path=require("path"),dotenv=require("dotenv"),dotenvExpand=require("dotenv-expand");function processEnv(e,n){const o=Object.assign({},process.env),t={};for(const r of e)try{let e={};e.parsed=dotenv.parse(r.contents),e=dotenvExpand(e);for(const n of Object.keys(e.parsed||{}))"undefined"===typeof t[n]&&"undefined"===typeof o[n]&&(t[n]=e.parsed[n])}catch(s){console.error("Failed to load env from "+path.join(n||"",r.path),s)}return Object.assign(process.env,t)}module.exports.loadEnvConfig=function(e=""){const n=[".env.development.local",".env.local",".env.development",".env"].filter(Boolean);let o=[];for(const s of n){const n=path.join(e,s);try{if(!fs.statSync(n).isFile())continue;const e=fs.readFileSync(n,"utf8");o.push({path:s,contents:e})}catch(t){"ENOENT"!==t.code&&console.error("Failed to load env from "+s,t)}}return{combinedEnv:processEnv(o,e),loadedEnvFiles:o}};