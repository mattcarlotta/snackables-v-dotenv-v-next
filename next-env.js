"use strict";function _createForOfIteratorHelper(r,e){var n;if("undefined"==typeof Symbol||null==r[Symbol.iterator]){if(Array.isArray(r)||(n=_unsupportedIterableToArray(r))||e&&r&&"number"==typeof r.length){n&&(r=n);var t=0,o=function(){};return{s:o,n:function(){return t>=r.length?{done:!0}:{done:!1,value:r[t++]}},e:function(r){throw r},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=r[Symbol.iterator]()},n:function(){var r=n.next();return i=r.done,r},e:function(r){c=!0,a=r},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function _unsupportedIterableToArray(r,e){if(r){if("string"==typeof r)return _arrayLikeToArray(r,e);var n=Object.prototype.toString.call(r).slice(8,-1);return"Object"===n&&r.constructor&&(n=r.constructor.name),"Map"===n||"Set"===n?Array.from(r):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(r,e):void 0}}function _arrayLikeToArray(r,e){(null==e||e>r.length)&&(e=r.length);for(var n=0,t=new Array(e);n<e;n++)t[n]=r[n];return t}Object.defineProperty(exports,"__esModule",{value:!0}),exports.loadEnvConfig=loadEnvConfig;var fs=require("fs"),path=require("path"),dotenv=require("dotenv"),dotenvExpand=require("dotenv-expand"),_console=console,log=_console.log,error=_console.error;function processEnv(r,e){process.env.__NEXT_PROCESSED_ENV="true";var n,t=Object.assign({},process.env),o={},a=_createForOfIteratorHelper(r);try{for(a.s();!(n=a.n()).done;){var i=n.value;try{var c={};c.parsed=dotenv.parse(i.contents),c=dotenvExpand(c);for(var s=0,l=Object.keys(c.parsed||{});s<l.length;s++){var u=l[s];void 0===o[u]&&void 0===t[u]&&(o[u]=c.parsed[u])}}catch(r){error("Failed to load env from ".concat(path.join(e||"",i.path)),r)}}}catch(r){a.e(r)}finally{a.f()}return Object.assign(process.env,o)}function loadEnvConfig(){for(var r=process.cwd(),e=[],n=0,t=[".env",".env.base"];n<t.length;n++){var o=t[n],a=path.join(r,o);try{if(!fs.statSync(a).isFile())continue;var i=fs.readFileSync(a,"utf8");e.push({path:o,contents:i})}catch(r){"ENOENT"!==r.code&&log("Failed to load env from ".concat(o),r)}}return{combinedEnv:processEnv(e,r),loadedEnvFiles:e}}